---
import type { Form as Props } from '~/types';
import Button from '~/components/ui/Button.astro';

const { inputs, textarea, disclaimer, button = 'Contact us', description = '' } = Astro.props;
---

<form id="contact-form" class="space-y-6">
  {
    inputs &&
      inputs.map(
        ({ type = 'text', name, label = '', autocomplete = 'on', placeholder = '' }) =>
          name && (
            <div class="mb-6">
              {label && (
                <label for={name} class="block text-sm font-medium">
                  {label}
                </label>
              )}
              <input
                type={type}
                name={name}
                id={name}
                autocomplete={autocomplete}
                placeholder={placeholder}
                required
                class="py-3 px-4 block w-full text-md rounded-lg border border-gray-200 dark:border-gray-700 bg-white dark:bg-slate-900"
              />
            </div>
          )
      )
  }

  {
    textarea && (
      <div>
        <label for="textarea" class="block text-sm font-medium">
          {textarea.label}
        </label>
        <textarea
          id="textarea"
          name={textarea.name ? textarea.name : 'message'}
          rows={textarea.rows ? textarea.rows : 4}
          placeholder={textarea.placeholder}
          required
          class="py-3 px-4 block w-full text-md rounded-lg border border-gray-200 dark:border-gray-700 bg-white dark:bg-slate-900"
        />
      </div>
    )
  }

  {
    disclaimer && (
      <div class="mt-3 flex items-start">
        <div class="flex mt-0.5">
          <input
            id="disclaimer"
            name="disclaimer"
            type="checkbox"
            required
            class="cursor-pointer mt-1 py-3 px-4 block w-full text-md rounded-lg border border-gray-200 dark:border-gray-700 bg-white dark:bg-slate-900"
          />
        </div>
        <div class="ml-3">
          <label for="disclaimer" class="cursor-pointer select-none text-sm text-gray-600 dark:text-gray-400">
            {disclaimer.label}
          </label>
        </div>
      </div>
    )
  }

  {
    button && (
      <div class="mt-10 grid">
        <Button variant="primary" type="submit" id="submit-btn">
          <span id="button-text">{button}</span>
          <span id="button-loading" class="hidden">
            <svg
              class="animate-spin -ml-1 mr-3 h-5 w-5 text-white"
              xmlns="http://www.w3.org/2000/svg"
              fill="none"
              viewBox="0 0 24 24"
            >
              <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4" />
              <path
                class="opacity-75"
                fill="currentColor"
                d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"
              />
            </svg>
            Sending...
          </span>
        </Button>
      </div>
    )
  }

  <div id="form-message" class="hidden mt-4 p-4 rounded-lg"></div>

  {
    description && (
      <div class="mt-3 text-center">
        <p class="text-sm text-gray-600 dark:text-gray-400">{description}</p>
      </div>
    )
  }
</form>

<script is:inline>
  (function () {
    console.log('Contact form script loaded');

    function initForm() {
      const form = document.getElementById('contact-form');
      const submitBtn = document.getElementById('submit-btn');
      const buttonText = document.getElementById('button-text');
      const buttonLoading = document.getElementById('button-loading');
      const formMessage = document.getElementById('form-message');

      if (!form) {
        console.error('Contact form not found');
        return;
      }

      console.log('Form found, adding submit listener');

      // Remove any existing listeners
      form.removeEventListener('submit', handleSubmit);

      // Add submit listener
      form.addEventListener('submit', handleSubmit);

      async function handleSubmit(e) {
        console.log('Form submit event triggered');
        e.preventDefault();
        e.stopPropagation();
        e.stopImmediatePropagation();

        console.log('Prevented default form submission');

        // Show loading state
        if (submitBtn) submitBtn.disabled = true;
        if (buttonText) buttonText.classList.add('hidden');
        if (buttonLoading) buttonLoading.classList.remove('hidden');
        if (formMessage) formMessage.classList.add('hidden');

        try {
          const formData = new FormData(form);
          const data = Object.fromEntries(formData.entries());

          console.log('Form data:', data);

          const response = await fetch('/api/contact', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
            },
            body: JSON.stringify(data),
          });

          console.log('API response status:', response.status);
          const result = await response.json();
          console.log('API response:', result);

          if (response.ok) {
            // Success
            if (formMessage) {
              formMessage.className =
                'mt-4 p-4 rounded-lg bg-green-100 border border-green-400 text-green-700 dark:bg-green-900 dark:border-green-700 dark:text-green-300';
              formMessage.textContent = 'Thank you! Your message has been sent successfully.';
            }
            form.reset();
          } else {
            // Error
            if (formMessage) {
              formMessage.className =
                'mt-4 p-4 rounded-lg bg-red-100 border border-red-400 text-red-700 dark:bg-red-900 dark:border-red-700 dark:text-red-300';
              formMessage.textContent = result.message || 'Something went wrong. Please try again.';
            }
          }
        } catch (error) {
          console.error('Form submission error:', error);
          // Network error
          if (formMessage) {
            formMessage.className =
              'mt-4 p-4 rounded-lg bg-red-100 border border-red-400 text-red-700 dark:bg-red-900 dark:border-red-700 dark:text-red-300';
            formMessage.textContent = 'Network error. Please check your connection and try again.';
          }
        } finally {
          // Reset button state
          if (submitBtn) submitBtn.disabled = false;
          if (buttonText) buttonText.classList.remove('hidden');
          if (buttonLoading) buttonLoading.classList.add('hidden');
          if (formMessage) formMessage.classList.remove('hidden');
        }
      }
    }

    // Try to initialize immediately
    if (document.readyState === 'loading') {
      document.addEventListener('DOMContentLoaded', initForm);
    } else {
      initForm();
    }

    // Also try after a short delay as a backup
    setTimeout(initForm, 100);
  })();
</script>
