---
import Image from '~/components/common/Image.astro';
import Button from '~/components/ui/Button.astro';

import type { Hero as Props } from '~/types';

const {
  title = await Astro.slots.render('title'),
  subtitle = await Astro.slots.render('subtitle'),
  tagline,

  content = await Astro.slots.render('content'),
  actions = await Astro.slots.render('actions'),
  image = await Astro.slots.render('image'),

  id,
  bg = await Astro.slots.render('bg'),
} = Astro.props;
---

<section class="relative not-prose" {...id ? { id } : {}}>
  <div class="absolute inset-0 pointer-events-none" aria-hidden="true">
    <slot name="bg">
      {bg ? <Fragment set:html={bg} /> : null}
    </slot>
  </div>

  <div class="relative max-w-7xl mx-auto px-4 sm:px-6 h-screen flex items-center">
    <div class="flex flex-col-reverse md:flex-row items-center md:items-center gap-12 md:gap-24 w-full h-full">
      <!-- Left: Text Content -->
      <div class="w-full md:w-1/2 flex flex-col justify-center items-center md:items-start text-center md:text-left">
        {
          tagline && (
            <p
              class="text-sm text-secondary dark:text-blue-300 font-semibold tracking-widest uppercase mb-2 intersect-once intersect-quarter motion-safe:md:opacity-0 motion-safe:md:intersect:animate-fade"
              set:html={tagline}
            />
          )
        }

        {
          title && (
            <h1
              class="text-6xl md:text-7xl lg:text-8xl font-heading font-extrabold leading-tight tracking-tighter dark:text-white intersect-once intersect-quarter motion-safe:md:opacity-0 motion-safe:md:intersect:animate-fade"
              set:html={title}
            />
          )
        }

        {
          subtitle && (
            <p
              class="mt-4 text-xl text-muted dark:text-slate-300 max-w-xl intersect-once intersect-quarter motion-safe:md:opacity-0 motion-safe:md:intersect:animate-fade"
              set:html={subtitle}
            />
          )
        }

        {
          actions && (
            <div class="mt-8 flex flex-wrap gap-4 justify-center md:justify-start">
              {Array.isArray(actions) ? (
                actions.map((action) => <Button {...(action || {})} />)
              ) : (
                <Fragment set:html={actions} />
              )}
            </div>
          )
        }
        {content && <Fragment set:html={content} />}
      </div>

      <!-- Right: Gorilla Image -->
      <div class="w-full md:w-1/2 h-[60vh] sm:h-[70vh] md:h-full flex justify-center items-center">
        {
          image && (
            <div class="relative w-full h-full flex justify-center items-center">
              {typeof image === 'string' ? (
                <Fragment set:html={image} />
              ) : (
                <Image
                  class="w-full max-h-full object-contain"
                  widths={[320, 480, 640, 800, 1000]}
                  sizes="(max-width: 767px) 80vw, (max-width: 1023px) 50vw, 600px"
                  loading="eager"
                  width={800}
                  height={800}
                  {...image}
                />
              )}
            </div>
          )
        }
      </div>
    </div>
  </div>
</section>
